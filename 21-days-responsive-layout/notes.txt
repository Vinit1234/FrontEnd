- Websites are responsive by default. It's us who kill the responsiveness.

#1: 
Don't set height and width.
If required, set width in percentage;
and to give height use padding.

Em vs rem - https://youtu.be/_-aDOAMmDHI




#2 Relative units - Ems and rems:

- ems are used in printing world.
- ems are relative to immediate parent. If no value is set, it 
is relative to 16px by default.
- use ems when you want to maintain propotion of te designed components 
(eg, designed button)
- If ems are set in nested child elements, there might be compounding effect
(compoundingly getting bigger or smaller).

- rems were introduced to solve this problem.
- rems are relative to root tag ie, <html> ie, ::root{}
- rem units keep everything consistent thoughout the webpage.

NOTE: By setting the font-size of parent element or root element, you can change
the font-size of entire website. Hence it is recommended to use these 
relative units ie, ems and rems.



NOTE:
Eg1.

.col-123{
    font-size:2em; /* means 16px *2 =32 */
    margin-bottom: 2em; /* means 2*(previously set em value (ie, of font-size)) ie, 2*32=64  */
    padding: 1rem;  /* Always relative to root; 16px by default */
}

Eg2.

<button class="btn"></button>
<button class="btn btn-small"></button>

.btn{
    background:black;
    color:white;
    
    /* keeps padding propotionate to font-size in elements having btn-small class*/
    /* ie,due to em padding adapts to font-size in the btn-small elements */
    padding: 1em 3em; 

    /*padding won't change if they are kept in rem here*/
    padding: 1rem 3rem; 

}

btn-small{
    /* Not recommended */
    font-size: 0.5em;
}



#3 Max-width

NOTE:
Setting a fixed width on an element tends to be a bad idea. Instead we can use percentages, which make our lives easier.
The only issue with this is, at large screens, things can get too big. Thankfully, we have max-width that can help us out!


#4 viewport units 

Viewport units are relative to browser's size on the screen.

Design based on viewport units break for mobile screens.

Avoid using viewport units as there are some accessibility issues.

Note: the difference between vw (or vh) and percentages is that vw and vh are relative to the viewport whereas percentages are relative to the parent element.


# Extra reading

1. Width and max-width combination (max-width overpowers width)
https://css-tricks.com/tale-width-max-width/

2. Emmet documentation - https://docs.emmet.io/

3. BEM (style of writing code) - https://youtu.be/SLjHSVwXYq4

4. box-sizing: border-box - https://youtu.be/WlGQdgy-M6w



#9  Flexbox Basics


.row{
    display: flex;
    /*Adds gap b/w flex-items; 
    supported only on modern browsers except MS InternetExplorer*/
    gap: 100px;
}

.col{
    /* Flex items */
    width: 100%;
}

/* Combinators */
/* Give spacing/gap between flex items */
/* Select a .col having .col before it */
.col + .col{
    background-color:limegreen;
}


>> Column widths and flexbox


Try to keep minimal code in your flex row:

Eg. 
>> Incorrect approach ------------------------------------------------

.row{
    display: flex;
    gap:1rem;
    padding: 2rem;
    text-align: center;
}

>> Correct approach ------------------------------------------------

.row{
    display: flex;
}

.col + .col{
    margin-left: 30px;
}

.hero {
    padding: 100px 0;
}

.three-col{
    text-align: center;

}

.two-col{
    text-align: center;
}

------------------------------------------------

Avoid image stretching by fiving class to img:
.hero__img{
    align-self:flex-start;
}

------------------------------------------------

<div class="parent">
    <div class="child-1"></div>
    <img class="child-2" src="" alt="">
</div>


.parent{
    display:flex;
}

If you want child-1 and child-2 to be equally sized 
while zoom-in and zoom-out then:

.child-1{
    width:100%;
}
.child-2{
    width:100%;
}


If you want child-1 to take 60% and child-2 to take 30% 
while zoom-in and zoom-out then:
.child-1{
    width:60%;
    margin-right:10%;
}
.child-2{
    width:30%;
}

If you want child-1 to take 60% and child-2 to adjust automatically
while zoom-in and zoom-out then:

.child-1{
    width:60%;
    margin-right:10%;
}

------------------------------------------------

To make image responsive use div:

<div class="img-wrapper">
    <img src="" alt="">
</div>

img{
    max-width:100%;
}

or

img{
    width:250px;
    height:150px;
    object-fit:cover;
    object-position: bottom;
    padding: 5px;
}

----------------------------------------------------------------

#Exploring Flexbox

Flexbox cheatsheet:
https://flexbox.malven.co/

https://www.samanthaming.com/flexbox30/

align-content determines the spacing between lines
(align-content doesn't interfere with items in a row but with rows itself. Hence, align-content will try to align rows with respect to each other and flex container.)

align-items determines how the items as a whole are aligned within the container.(align-items is for items in a single row.)

When there is only one line, align-content has no effect


----------------------------------------------------------------
# min() max() and clamp()



/* width: 70%;
    max-width: 600px; */

- Same as commented code above 
locks/selects the width as min b/w the 2 values:
width: min(600px,70%); 

- keeps the width as max b/w 2 values: 
width: max(600px,70%);

- select max among 3 values (less used): 
width: max(600px,70%, 50vw); 

- can use max inside min and vice-a-versa (least used): 
width: min(max(200px,40%),40vw); 

- can use calculations also:
width: min(500px + 20%, 1000px);

-/* clamp(min-value, preferred-value ,max-value) */
    width: clamp(200px, 50%, 20rem);


Tip: Make font-size fluid:
font-size: 2vw;  
(Drawback: 
- At small screen size, font becomes unreadable.
- the font doesn't zoom-in when browser is zoomed-in as it's size is associated with screen size which remains fixed in this case.
)

Better trick:
Better trick to make font-size fluid but fails for small screen size
    font-size: calc(1vw + 0.5rem);

Best trick:
    font-size: clamp(1rem, 1.25vw, 1.25rem);

-------------------------------------------

How do decide what breakpoints to use?

Points/screen-sizes where your layout design starts to fail. Figure out breakpoints by inspecting and changing the size of the screen.

Reference:
https://www.freecodecamp.org/news/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862/

The tl;dr of the article: Use 600px, 900px, 1200px, and 1800px if you plan on giving the giant-monitor people something special. 

The following line is important as it keeps our website responsive when changing the size of screen.
If absent, the website will shrink and expand as it is (w/o reloacting any html element).

<meta name="viewport" content="width=device-width, initial-scale=1.0">

------------------------------------------

Generally, the smallest screen sizes are of 320px,
ensure this while checking responsiveness of your website.
